/**
 * SRCMiner ‰∏ªClass - Ê†∏ÂøÉÊéßÂà∂Âô®
 */
class SRCMiner {
    constructor() {
        this.results = {};
        this.deepScanRunning = false;
        this.scannedUrls = new Set();
        this.pendingUrls = new Set();
        this.deepScanResults = {};
        this.currentDepth = 0;
        this.maxDepth = 2;
        this.concurrency = 3;
        
        // InitializeGroup‰ª∂
        this.initComponents();
        this.init();
    }
    
    // InitializeÂêÑ‰∏™Group‰ª∂
    initComponents() {
        // InitializePatternExtractÂô®
        this.patternExtractor = new PatternExtractor();
        // EnsureLoadCustomÊ≠£ÂàôConfigurationÔºàScan‰∏éÊ∑±Â∫¶ScanBeforeÔºâ
        try {
            if (this.patternExtractor && typeof this.patternExtractor.loadCustomPatterns === 'function') {
                // È¶ñÊ¨°Load
                this.patternExtractor.loadCustomPatterns().catch(err => {
                    console.error('LoadCustomÊ≠£ÂàôFailed:', err);
                });
                // ListenSettingsUpdateÔºåÂÆûÊó∂Âà∑Êñ∞
                window.addEventListener('regexConfigUpdated', () => {
                    try {
                        this.patternExtractor.loadCustomPatterns().catch(err => {
                            console.error('Âà∑Êñ∞CustomÊ≠£ÂàôFailed:', err);
                        });
                    } catch (e) {
                        console.warn('Âà∑Êñ∞CustomÊ≠£ÂàôÂºÇÂ∏∏:', e);
                    }
                });
            }
        } catch (e) {
            console.warn('InitializeCustomÊ≠£ÂàôÊó∂ÂèëÁîüÂºÇÂ∏∏:', e);
        }
        
        // InitializeContent extractionÂô®
        this.contentExtractor = new ContentExtractor(this);
        
        // InitializeÊ∑±Â∫¶ScanÂô®
        this.deepScanner = new DeepScanner(this);
        
        // InitializeDisplayÁÆ°ÁêÜÂô®
        this.displayManager = new DisplayManager(this);
        
        // InitializeAPI TestingÂô®
        this.apiTester = new ApiTester(this);
        
        //console.log('‚úÖ ÊâÄÊúâGroup‰ª∂InitializeComplete');
    }
    
    init() {
        // InitializeÂØºËà™ÂàáÊç¢
        this.initNavigation();
        
        // InitializeÊåâÈíÆ‰∫ã‰ª∂
        this.initEventListeners();
        
        // InitializeÁ™óÂè£‰∫ã‰ª∂Listen
        this.initWindowEvents();
        
        // LoadSavedÁöÑResultAndAutoScan
        this.loadResults();
        this.autoScanIfNeeded();
    }
    
    // InitializeÁ™óÂè£‰∫ã‰ª∂Listen
    initWindowEvents() {
        // ListenÁ™óÂè£ÁÑ¶ÁÇπ‰∫ã‰ª∂
        window.addEventListener('focus', () => {
            //console.log('üîÑ Á™óÂè£Ëé∑ÂæóÁÑ¶ÁÇπÔºåReloadData...');
            this.loadResults().then(() => {
                if (Object.keys(this.results).length > 0) {
                    this.displayResults();
                }
            });
        });
        
        // ListenPageÂèØËßÅÊÄßÂèòÂåñ
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                //console.log('üîÑ PageÂèò‰∏∫ÂèØËßÅÔºåReloadData...');
                this.loadResults().then(() => {
                    if (Object.keys(this.results).length > 0) {
                        this.displayResults();
                    }
                });
            }
        });
        
        // ÂÆöÊúüCheckDataCompleteÊÄß
        setInterval(() => {
            this.checkDataIntegrity();
        }, 5000); // Every5 secondsCheck‰∏ÄÊ¨°
    }
    
    // CheckDataCompleteÊÄß
    async checkDataIntegrity() {
        try {
            // GetCurrentPageURL
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            if (!tab || !tab.url) return;
            
            const urlObj = new URL(tab.url);
            const fullUrl = `https://${urlObj.hostname}`;
            
            // fromIndexedDBCheckData
            if (!window.indexedDBManager) {
                window.indexedDBManager = new IndexedDBManager();
            }
            
            const storedData = await window.indexedDBManager.loadScanResults(fullUrl);
            
            // Â¶ÇÊûúÂ≠òÂÇ®‰∏≠ÊúâData‰ΩÜÂÜÖÂ≠ò‰∏≠NoÔºåReload
            if (storedData && storedData.results && 
                Object.keys(this.results || {}).length === 0) {
                //console.log('üîß DetectÂà∞Data‰∏¢Â§±ÔºåIn progressÊÅ¢Â§ç...');
                await this.loadResults();
                if (Object.keys(this.results).length > 0) {
                    this.displayResults();
                }
            }
        } catch (error) {
            console.error('DataCompleteÊÄßCheckFailed:', error);
        }
    }
    
    initEventListeners() {
        document.getElementById('scanBtn').addEventListener('click', () => this.startScan());
        document.getElementById('deepScanBtn').addEventListener('click', () => this.toggleDeepScan());
        document.getElementById('clearBtn').addEventListener('click', () => this.clearResults());
        document.getElementById('exportBtn').addEventListener('click', () => this.exportResults());
        
        // BatchRequestÊåâÈíÆ
        const batchRequestBtn = document.getElementById('batchRequestBtn');
        if (batchRequestBtn) {
            batchRequestBtn.addEventListener('click', () => this.batchRequestTest());
        }
        
        // AddCustomAPIPathÊåâÈíÆ
        const addCustomApiBtn = document.getElementById('addCustomApiBtn');
        if (addCustomApiBtn) {
            addCustomApiBtn.addEventListener('click', () => this.addCustomApiPaths());
        }
        
        // Ê®°ÊÄÅÊ°ÜCloseÊåâÈíÆ
        const closeModalBtn = document.getElementById('closeModalBtn');
        if (closeModalBtn) {
            closeModalBtn.addEventListener('click', () => {
                document.getElementById('requestResultModal').style.display = 'none';
            });
        }
        
        // Êñ∞ÊåâÈíÆ‰∫ã‰ª∂Process
        const toggleExpandBtn = document.getElementById('toggleExpandBtn');
        if (toggleExpandBtn) {
            toggleExpandBtn.addEventListener('click', () => {
                const resultItems = document.querySelectorAll('.result-item');
                resultItems.forEach(item => {
                    item.classList.toggle('collapsed');
                });
            });
        }
        
        const batchViewBtn = document.getElementById('batchViewBtn');
        if (batchViewBtn) {
            batchViewBtn.addEventListener('click', () => {
                const modal = document.getElementById('requestResultModal');
                const resultsContainer = document.getElementById('requestResults');
                resultsContainer.innerHTML = '';
                
                // GetÊâÄÊúâScan resultsAndAddÂà∞Ê®°ÊÄÅÊ°Ü
                const resultItems = document.querySelectorAll('.result-item');
                resultItems.forEach(item => {
                    const clone = item.cloneNode(true);
                    clone.classList.remove('collapsed');
                    resultsContainer.appendChild(clone);
                });
                
                modal.style.display = 'block';
            });
        }
        
        // CopyÊâÄÊúâResultÊåâÈíÆ
        const copyAllResultsBtn = document.getElementById('copyAllResultsBtn');
        if (copyAllResultsBtn) {
            copyAllResultsBtn.addEventListener('click', () => {
                const results = document.getElementById('requestResults').innerText;
                navigator.clipboard.writeText(results).then(() => {
                    const textSpan = copyAllResultsBtn.querySelector('.text');
                    if (textSpan) {
                        textSpan.textContent = '‚úÖ Copied';
                        setTimeout(() => {
                            textSpan.textContent = 'CopyAllResult';
                        }, 2000);
                    }
                });
            });
        }
    }
    
    // InitializeÂØºËà™ÂäüËÉΩ
    initNavigation() {
        const navTabs = document.querySelectorAll('.nav-tab');
        const pages = document.querySelectorAll('.page');
        
        navTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetPage = tab.dataset.page;
                
                // UpdateÂØºËà™Status
                navTabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // UpdatePageDisplay
                pages.forEach(page => {
                    page.classList.remove('active');
                    const pageId = `${targetPage}-page`;
                    if (page.id === pageId) {
                        page.classList.add('active');
                    }
                });
                
                // PageÂàáÊç¢AfterÁöÑÁâπÊÆäProcess
                this.handlePageSwitch(targetPage);
            });
        });
    }
    
    // ProcessPageÂàáÊç¢AfterÁöÑÈÄªËæë
    handlePageSwitch(pageName) {
        switch (pageName) {
            case 'scan':
                // ÂàáÊç¢Âà∞ScanPageÊó∂ÔºåReloadAndDisplayResult
                this.loadResults().then(() => {
                    if (Object.keys(this.results).length > 0) {
                        this.displayResults();
                    }
                });
                break;
            case 'deep':
                // ÂàáÊç¢Âà∞Ê∑±Â∫¶ScanPageÊó∂ÔºåÊÅ¢Â§çÊ∑±Â∫¶ScanStatus
                this.loadResults().then(() => {
                    this.restoreDeepScanUI();
                });
                break;
            case 'test':
                // ÂàáÊç¢Âà∞API TestingPageÊó∂ÔºåUpdateCategoryÈÄâÊã©Âô®
                this.loadResults().then(() => {
                    this.updateCategorySelect();
                });
                break;
            case 'about':
                // ÂÖ≥‰∫éPage
                break;
        }
    }
    
    // ÊÅ¢Â§çÊ∑±Â∫¶ScanUIStatus
    restoreDeepScanUI() {
        if (this.deepScanRunning) {
            const deepScanBtn = document.getElementById('deepScanBtn');
            const deepScanBtnText = deepScanBtn?.querySelector('.text');
            const configDiv = document.getElementById('deepScanConfig');
            const progressDiv = document.getElementById('deepScanProgress');
            
            if (deepScanBtnText) {
                deepScanBtnText.textContent = '‚èπÔ∏è Stop scanning';
            }
            if (deepScanBtn) {
                deepScanBtn.style.background = 'rgba(239, 68, 68, 0.3)';
                deepScanBtn.style.color = '#fff';
            }
            if (configDiv) {
                configDiv.style.display = 'block';
            }
            if (progressDiv) {
                progressDiv.style.display = 'block';
            }
        }
        
        // Â¶ÇÊûúÊúâÊ∑±Â∫¶Scan resultsÔºåEnsureDisplay
        if (this.deepScanResults && Object.keys(this.deepScanResults).length > 0) {
            this.results = this.deepScanResults;
            this.displayResults();
        }
    }
    
    // UpdateCategoryÈÄâÊã©Âô®
    updateCategorySelect() {
        const categorySelect = document.getElementById('categorySelect');
        if (!categorySelect || !this.results) return;
        
        // SaveCurrentÈÄâ‰∏≠ÁöÑÂÄº
        const currentValue = categorySelect.value;
        
        // ClearÁé∞ÊúâÈÄâItem
        categorySelect.innerHTML = '';
        
        // AddDefaultÈÄâItem
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'ËØ∑ÈÄâÊã©Ë¶ÅTestÁöÑCategory';
        categorySelect.appendChild(defaultOption);
        
        // AddÊúâDataÁöÑCategory
        const categories = [
            { key: 'customApis', title: 'üîß CustomAPIPath' },
            { key: 'absoluteApis', title: 'üîó Absolute pathAPI' },
            { key: 'relativeApis', title: 'üìÅ Relative pathAPI' },
            { key: 'jsFiles', title: 'üìú JSFile' },
            { key: 'cssFiles', title: 'üé® CSSFile' },
            { key: 'images', title: 'üñºÔ∏è ÂõæÁâáFile' },
            { key: 'urls', title: 'üîó CompleteURL' },
            { key: 'domains', title: 'üåê Domain' },
            { key: 'paths', title: 'üìÇ Path' }
        ];
        
        categories.forEach(category => {
            const items = this.results[category.key] || [];
            if (items.length > 0) {
                const option = document.createElement('option');
                option.value = category.key;
                option.textContent = `${category.title} (${items.length})`;
                categorySelect.appendChild(option);
            }
        });
        
        // ÊÅ¢Â§ç‰πãBeforeÈÄâ‰∏≠ÁöÑÂÄºÔºàÂ¶ÇÊûú‰ªçÁÑ∂Â≠òÂú®Ôºâ
        if (currentValue && categorySelect.querySelector(`option[value="${currentValue}"]`)) {
            categorySelect.value = currentValue;
        }
    }
    
    // Start scanning
    async startScan(silent = false) {
        if (!silent) {
            //console.log('üîç Start scanningPage...');
        }
        
        try {
            // SendÊ∂àÊÅØÂà∞content scriptPerformScan
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            
            if (!tab || !tab.url) {
                throw new Error('NoneÊ≥ïGetCurrentPageInformation');
            }
            
            // CheckÊòØÂê¶ÊòØValidÁöÑÁΩëÈ°µURL
            if (tab.url.startsWith('chrome://') || tab.url.startsWith('chrome-extension://')) {
                if (!silent) {
                    alert('NoneÊ≥ïScanSystemPageÔºåËØ∑Âú®ÊôÆÈÄöÁΩëÈ°µ‰∏ä‰ΩøÁî®Ê≠§ÂäüËÉΩ');
                }
                return;
            }
            
            const response = await chrome.tabs.sendMessage(tab.id, { action: 'extractInfo' });
            
            if (response) {
                //console.log('üîç [SCAN LOG] Êî∂Âà∞ÂéüÂßãScan results');
                //console.log('üîç [SCAN LOG] ÂéüÂßãResultStatistics:', this.getResultsStats(response));
                
                // Âú®ScanÈò∂ÊÆµÂ∞±Â∫îÁî®FilterÂô®
                //console.log('üîç [SCAN LOG] StartÂ∫îÁî®FilterÂô®Âà∞Scan results...');
                this.results = await this.applyFiltersToScanResults(response);
                //console.log('üîç [SCAN LOG] FilterAfterResultStatistics:', this.getResultsStats(this.results));
                //console.log('‚úÖ [SCAN LOG] FilterÂô®Â∫îÁî®Complete');
                
                // ClearÊ∑±Â∫¶Scan resultsÔºåÈÅøÂÖçÊóßDataÂπ≤Êâ∞
                this.deepScanResults = {};
                //console.log('üîç [SCAN LOG] ClearedÊ∑±Â∫¶Scan resultsÁºìÂ≠ò');
                
                await this.displayResults();
                
                // EnsureSaveÊìç‰ΩúByExecute
                //console.log('üîç [SCAN LOG] PrepareË∞ÉÁî® saveResults()...');
                try {
                    await this.saveResults();
                    //console.log('‚úÖ [SCAN LOG] saveResults() Ë∞ÉÁî®Complete');
                } catch (saveError) {
                    console.error('‚ùå [SCAN LOG] saveResults() Ë∞ÉÁî®Failed:', saveError);
                }
                
                // UpdateCategoryÈÄâÊã©Âô®
                this.updateCategorySelect();
                
                if (!silent) {
                    //console.log('‚úÖ [SCAN LOG] Scan completed');
                }
            } else {
                throw new Error('NotÊî∂Âà∞Scan results');
            }
        } catch (error) {
            console.error('‚ùå [SCAN LOG] ScanFailed:', error);
            if (!silent) {
                alert('ScanFailed: ' + error.message);
            }
        }
    }
    
    // Âú®ScanÈò∂ÊÆµÂ∫îÁî®FilterÂô®
    async applyFiltersToScanResults(rawResults) {
        try {
            //console.log('üîç [FILTER LOG] StartÂ∫îÁî®FilterÂô®...');
            //console.log('üîç [FILTER LOG] ÂéüÂßãResultStatistics:', this.getResultsStats(rawResults));
            
            // EnsureFilterÂô®Loaded
            await this.loadFiltersIfNeeded();
            
            // Â¶ÇÊûúFilterÂô®‰∏çAvailableÔºåReturnÂéüÂßãResult
            if (!window.domainPhoneFilter && !window.apiFilter) {
                console.warn('‚ö†Ô∏è [FILTER LOG] FilterÂô®NotLoadÔºåReturnÂéüÂßãScan results');
                return rawResults;
            }
            
            console.log('üîç [FILTER LOG] FilterÂô®Status:', {
                domainPhoneFilter: !!window.domainPhoneFilter,
                apiFilter: !!window.apiFilter
            });
            
            // CreateFilterAfterÁöÑResultObject
            const filteredResults = {};
            
            // ‰ΩøÁî®APIFilterÂô®ProcessPathTypeData
            if (window.apiFilter) {
                //console.log('üîç [FILTER LOG] ‰ΩøÁî®APIFilterÂô®ProcessPathData...');
                const resultsSet = window.apiFilter.createEmptyResultSet();
                
                // ProcessÂêÑÁßçPathType
                const pathCategories = ['absoluteApis', 'relativeApis', 'jsFiles', 'cssFiles', 'images', 'urls', 'paths'];
                pathCategories.forEach(category => {
                    if (rawResults[category] && Array.isArray(rawResults[category])) {
                        //console.log(`üîç [FILTER LOG] Process ${category}: ${rawResults[category].length} ‰∏™Project`);
                        rawResults[category].forEach(item => {
                            if (item && typeof item === 'string') {
                                window.apiFilter.filterAPI(item, resultsSet);
                            }
                        });
                    }
                });
                
                // Â∞ÜFilterAfterÁöÑSetConvert‰∏∫Array
                Object.keys(resultsSet).forEach(key => {
                    if (resultsSet[key] instanceof Set) {
                        filteredResults[key] = Array.from(resultsSet[key]);
                        //console.log(`üîç [FILTER LOG] APIFilterÂô®Process ${key}: ${filteredResults[key].length} ‰∏™Project`);
                    } else if (Array.isArray(resultsSet[key])) {
                        filteredResults[key] = resultsSet[key];
                        //console.log(`üîç [FILTER LOG] APIFilterÂô®Process ${key}: ${filteredResults[key].length} ‰∏™Project`);
                    }
                });
            } else {
                // Â¶ÇÊûúNoAPIFilterÂô®ÔºåDirectCopyPathTypeData
                //console.log('‚ö†Ô∏è [FILTER LOG] APIFilterÂô®‰∏çAvailableÔºåDirectCopyPathData');
                const pathCategories = ['absoluteApis', 'relativeApis', 'jsFiles', 'cssFiles', 'images', 'urls', 'paths'];
                pathCategories.forEach(category => {
                    if (rawResults[category] && Array.isArray(rawResults[category])) {
                        filteredResults[category] = [...rawResults[category]];
                    }
                });
            }
            
            // ‰ΩøÁî®DomainAndÊâãÊú∫Âè∑FilterÂô®ProcessÊïèÊÑüInformation
            if (window.domainPhoneFilter) {
                //console.log('üîç [FILTER LOG] ‰ΩøÁî®DomainÊâãÊú∫Âè∑FilterÂô®ProcessÊïèÊÑüInformation...');
                
                // FilterDomain
                if (rawResults.domains && Array.isArray(rawResults.domains)) {
                    //console.log(`üîç [FILTER LOG] FilterDomain: ${rawResults.domains.length} -> `, rawResults.domains.slice(0, 5));
                    filteredResults.domains = window.domainPhoneFilter.filterDomains(rawResults.domains);
                    //console.log(`üîç [FILTER LOG] DomainFilterResult: ${filteredResults.domains.length} ‰∏™ValidDomain`);
                }
                
                // FilterÂ≠êDomain
                if (rawResults.subdomains && Array.isArray(rawResults.subdomains)) {
                    //console.log(`üîç [FILTER LOG] FilterÂ≠êDomain: ${rawResults.subdomains.length} ‰∏™`);
                    filteredResults.subdomains = window.domainPhoneFilter.filterDomains(rawResults.subdomains);
                    //console.log(`üîç [FILTER LOG] Â≠êDomainFilterResult: ${filteredResults.subdomains.length} ‰∏™ValidÂ≠êDomain`);
                }
                
                // FilterÈÇÆÁÆ±
                if (rawResults.emails && Array.isArray(rawResults.emails)) {
                    //console.log(`üîç [FILTER LOG] FilterÈÇÆÁÆ±: ${rawResults.emails.length} ‰∏™`);
                    filteredResults.emails = window.domainPhoneFilter.filterEmails(rawResults.emails);
                    //console.log(`üîç [FILTER LOG] ÈÇÆÁÆ±FilterResult: ${filteredResults.emails.length} ‰∏™ValidÈÇÆÁÆ±`);
                }
                
                // FilterÊâãÊú∫Âè∑
                if (rawResults.phoneNumbers && Array.isArray(rawResults.phoneNumbers)) {
                    //console.log(`üîç [FILTER LOG] FilterÊâãÊú∫Âè∑: ${rawResults.phoneNumbers.length} ‰∏™`);
                    filteredResults.phoneNumbers = window.domainPhoneFilter.filterPhones(rawResults.phoneNumbers, true);
                    //console.log(`üîç [FILTER LOG] ÊâãÊú∫Âè∑FilterResult: ${filteredResults.phoneNumbers.length} ‰∏™ValidÊâãÊú∫Âè∑`);
                }
            } else {
                // Â¶ÇÊûúNoDomainÊâãÊú∫Âè∑FilterÂô®ÔºåDirectCopyÊïèÊÑüInformation
                //console.log('‚ö†Ô∏è [FILTER LOG] DomainÊâãÊú∫Âè∑FilterÂô®‰∏çAvailableÔºåDirectCopyÊïèÊÑüInformation');
                const sensitiveCategories = ['domains', 'subdomains', 'emails', 'phoneNumbers'];
                sensitiveCategories.forEach(category => {
                    if (rawResults[category] && Array.isArray(rawResults[category])) {
                        filteredResults[category] = [...rawResults[category]];
                    }
                });
            }
            
            // ‰øùÁïôÂÖ∂‰ªñNotProcessÁöÑClassÂà´ÔºàDirectCopyÔºâ
            const otherCategories = [
                'ipAddresses', 'sensitiveKeywords', 'comments', 'parameters', 
                'credentials', 'cookies', 'idKeys', 'companies', 'jwts', 'githubUrls',
                'modulePaths', 'vueFiles', 'audios', 'videos', 'idcards', 'ports'
            ];
            
            otherCategories.forEach(category => {
                if (rawResults[category] && Array.isArray(rawResults[category])) {
                    filteredResults[category] = [...rawResults[category]];
                }
            });
            
            //console.log('‚úÖ [FILTER LOG] FilterCompleteÔºåÊúÄÁªàResultStatistics:', this.getResultsStats(filteredResults));
            
            // MarkResultAlreadyFilter
            filteredResults._filtered = true;
            
            return filteredResults;
            
        } catch (error) {
            console.error('‚ùå [FILTER LOG] Â∫îÁî®FilterÂô®Failed:', error);
            console.error('‚ùå [FILTER LOG] ErrorÂ†ÜÊ†à:', error.stack);
            return rawResults; // Âá∫ÈîôÊó∂ReturnÂéüÂßãResult
        }
    }
    
    // LoadFilterÂô®ÔºàÂ¶ÇÊûúNeedÔºâ
    async loadFiltersIfNeeded() {
        try {
            // CheckÊòØÂê¶AlreadyÁªèLoadFilter
            if (window.domainPhoneFilter && window.apiFilter) {
                return;
            }
            
            //console.log('üîÑ StartLoadScanFilterÂô®...');
            
            // LoadDomainAndÊâãÊú∫Âè∑FilterÂô®
            if (!window.domainPhoneFilter) {
                await this.loadFilterScript('filters/domain-phone-filter.js');
                
                if (typeof DomainPhoneFilter !== 'undefined') {
                    window.domainPhoneFilter = new DomainPhoneFilter();
                    //console.log('‚úÖ DomainÊâãÊú∫Âè∑FilterÂô®InitializeSuccess');
                }
            }
            
            // LoadAPIFilterÂô®
            if (!window.apiFilter) {
                await this.loadFilterScript('filters/api-filter.js');
                
                if (typeof APIFilter !== 'undefined') {
                    window.apiFilter = new APIFilter();
                    //console.log('‚úÖ APIFilterÂô®InitializeSuccess');
                }
            }
            
        } catch (error) {
            console.error('‚ùå FilterÂô®LoadFailed:', error);
        }
    }
    
    // LoadFilterÂô®Script
    async loadFilterScript(scriptPath) {
        return new Promise((resolve, reject) => {
            try {
                const script = document.createElement('script');
                script.src = chrome.runtime.getURL(scriptPath);
                
                script.onload = () => {
                    //console.log(`üì¶ FilterÂô®ScriptLoadSuccess: ${scriptPath}`);
                    resolve();
                };
                
                script.onerror = (error) => {
                    console.error(`‚ùå FilterÂô®ScriptLoadFailed: ${scriptPath}`, error);
                    reject(error);
                };
                
                document.head.appendChild(script);
                
                // SettingsË∂ÖÊó∂‰øùÊä§
                setTimeout(() => {
                    resolve();
                }, 3000);
            } catch (error) {
                console.warn(`‚ö†Ô∏è LoadFilterÂô®ScriptFailed: ${scriptPath}`, error);
                resolve();
            }
        });
    }
    
    // GetResultStatisticsInformation
    getResultsStats(results) {
        const stats = {};
        let total = 0;
        
        Object.keys(results || {}).forEach(key => {
            const count = Array.isArray(results[key]) ? results[key].length : 0;
            stats[key] = count;
            total += count;
        });
        
        stats.total = total;
        return stats;
    }
    
    async autoScanIfNeeded() {
        try {
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            
            // CheckÊòØÂê¶ÊòØValidÁöÑÁΩëÈ°µURL
            if (!tab.url || tab.url.startsWith('chrome://') || tab.url.startsWith('chrome-extension://')) {
                //console.log('Ë∑≥ËøáSystemPageÁöÑAutoScan');
                return;
            }
            
            // UpdateCurrentScanDomainDisplay
            this.updateCurrentDomain(tab.url);
            
            const urlObj = new URL(tab.url);
            const fullUrl = `https://${urlObj.hostname}`;
            
            // fromIndexedDBCheck‰∏äÊ¨°ScanTime
            if (!window.indexedDBManager) {
                window.indexedDBManager = new IndexedDBManager();
            }
            
            const scanData = await window.indexedDBManager.loadScanResults(fullUrl);
            
            // Â¶ÇÊûúNoScanËøáCurrentPageÔºåOrËÄÖË∂ÖËøá5ÂàÜÈíüÔºåÂàôAutoScan
            const now = Date.now();
            const lastScanTime = scanData ? scanData.timestamp : 0;
            const fiveMinutes = 5 * 60 * 1000;
            
            if (now - lastScanTime > fiveMinutes) {
                setTimeout(() => {
                    this.startScan(true); // ÈùôÈªòScan
                }, 2000);
            }
        } catch (error) {
            console.error('AutoScanCheckFailed:', error);
        }
    }
    
    updateCurrentDomain(url) {
        try {
            const urlObj = new URL(url);
            const domain = urlObj.hostname;
            const protocol = urlObj.protocol;
            const port = urlObj.port ? `:${urlObj.port}` : '';
            
            const domainDisplay = document.getElementById('currentDomain');
            if (domainDisplay) {
                domainDisplay.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 8px;">
                        <span style="font-size: 12px; opacity: 0.8;">In progressScan:</span>
                        <span style="color: #00d4aa; font-weight: 600;">${protocol}//${domain}${port}</span>
                    </div>
                `;
            }
        } catch (error) {
            console.error('UpdateDomainDisplayFailed:', error);
        }
    }
    
    async clearResults() {
        // ConfirmClearÊìç‰Ωú
        if (!confirm('ConfirmË¶ÅClearCurrentPageÁöÑScanDataÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§ç„ÄÇ')) {
            return;
        }
        
        try {
            // GetCurrentPageURL
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            if (!tab || !tab.url) {
                this.showNotification('NoneÊ≥ïGetCurrentPageURL', 'error');
                return;
            }
            
            const urlObj = new URL(tab.url);
            const fullUrl = `https://${urlObj.hostname}`;
            
            // ClearÂÜÖÂ≠ò‰∏≠ÁöÑData
            this.results = {};
            this.deepScanResults = {};
            this.scannedUrls = new Set();
            this.pendingUrls = new Set();
            this.deepScanRunning = false;
            this.currentDepth = 0;
            
            // ClearÁïåÈù¢Display
            document.getElementById('results').innerHTML = '';
            document.getElementById('stats').textContent = '';
            
            // fromIndexedDBClearCurrentPageRelatedÁöÑData
            if (!window.indexedDBManager) {
                window.indexedDBManager = new IndexedDBManager();
            }
            
            await window.indexedDBManager.deleteScanResults(fullUrl);
            await window.indexedDBManager.deleteDeepScanResults(fullUrl);
            await window.indexedDBManager.deleteDeepScanState(fullUrl);
            
            // ResetÊ∑±Â∫¶ScanUIStatus
            this.resetDeepScanUI();
            
            // ResetCategoryÈÄâÊã©Âô®
            this.updateCategorySelect();
            
            // DisplayClearSuccessPrompt
            this.showNotification(`Page ${urlObj.hostname} ÁöÑScanDataCleared`, 'success');
            
            //console.log(`‚úÖ Page ${urlObj.hostname} ÁöÑScanDataCleared`);
            
        } catch (error) {
            console.error('‚ùå ClearDataFailed:', error);
            this.showNotification('ClearDataFailed: ' + error.message, 'error');
        }
    }
    
    // ResetÊ∑±Â∫¶ScanUIStatus
    resetDeepScanUI() {
        const deepScanBtn = document.getElementById('deepScanBtn');
        const deepScanBtnText = deepScanBtn?.querySelector('.text');
        const configDiv = document.getElementById('deepScanConfig');
        const progressDiv = document.getElementById('deepScanProgress');
        
        if (deepScanBtnText) {
            deepScanBtnText.textContent = 'üöÄ StartÊ∑±Â∫¶Scan';
        }
        if (deepScanBtn) {
            deepScanBtn.style.background = 'rgba(0, 212, 170, 0.3)';
            deepScanBtn.style.color = '#00d4aa';
        }
        if (configDiv) {
            configDiv.style.display = 'none';
        }
        if (progressDiv) {
            progressDiv.style.display = 'none';
            progressDiv.innerHTML = '';
        }
        
        // ResetÊ∑±Â∫¶ScanRelatedÁöÑInputÊ°Ü
        const maxDepthInput = document.getElementById('maxDepth');
        const concurrencyInput = document.getElementById('concurrency');
        if (maxDepthInput) maxDepthInput.value = '2';
        if (concurrencyInput) concurrencyInput.value = '3';
    }
    
    // DisplayNotify
    showNotification(message, type = 'info') {
        // CreateNotifyElement
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = message;
        
        // SettingsÊ†∑Âºè
        notification.style.position = 'fixed';
        notification.style.top = '20px';
        notification.style.right = '20px';
        notification.style.padding = '10px 15px';
        notification.style.borderRadius = '6px';
        notification.style.zIndex = '10000';
        notification.style.fontSize = '12px';
        notification.style.fontWeight = '500';
        notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.3)';
        notification.style.animation = 'slideIn 0.3s ease';
        
        // Ê†πÊçÆTypeSettingsÈ¢úËâ≤
        switch (type) {
            case 'success':
                notification.style.backgroundColor = '#00d4aa';
                notification.style.color = '#fff';
                break;
            case 'error':
                notification.style.backgroundColor = '#e74c3c';
                notification.style.color = '#fff';
                break;
            case 'warning':
                notification.style.backgroundColor = '#f39c12';
                notification.style.color = '#fff';
                break;
            default:
                notification.style.backgroundColor = '#3498db';
                notification.style.color = '#fff';
        }
        
        // AddÂà∞Page
        document.body.appendChild(notification);
        
        // 3 secondsAfterAutoRemove
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
    
    async saveResults() {
        try {
            // GetCurrentPageURL‰Ωú‰∏∫Â≠òÂÇ®Key
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            if (!tab || !tab.url) {
                console.warn('‚ö†Ô∏è NoneÊ≥ïGetCurrentPageURLÔºåË∑≥ËøáSave');
                return;
            }
            
            const urlObj = new URL(tab.url);
            const hostname = urlObj.hostname;
            
            //console.log('üíæ [SAVE LOG] StartSave results...');
            //console.log('üíæ [SAVE LOG] Current this.results Statistics:', this.getResultsStats(this.results));
            //console.log('üíæ [SAVE LOG] Current this.deepScanResults Statistics:', this.getResultsStats(this.deepScanResults));
            
            // ConfirmË¶ÅSaveÁöÑÊúÄÁªàResult
            let finalResults = {};
            
            // Â¶ÇÊûúÊúâÊôÆÈÄöScan resultsÔºåDirect‰ΩøÁî®ÔºàAlreadyÁªèFilterËøáÔºâ
            if (this.results && Object.keys(this.results).length > 0) {
                //console.log('üíæ [SAVE LOG] ‰ΩøÁî®ÊôÆÈÄöScan results‰Ωú‰∏∫Basic');
                finalResults = { ...this.results };
            }
            
            // Â¶ÇÊûúÊúâÊ∑±Â∫¶Scan resultsÔºåNeedFirstFilterÂÜçÂêàAnd
            if (this.deepScanResults && Object.keys(this.deepScanResults).length > 0) {
                //console.log('üíæ [SAVE LOG] ProcessÊ∑±Â∫¶Scan results...');
                
                // FirstÂØπÊ∑±Â∫¶Scan resultsÂ∫îÁî®FilterÂô®
                const filteredDeepResults = await this.applyFiltersToScanResults(this.deepScanResults);
                //console.log('üíæ [SAVE LOG] Ê∑±Â∫¶Scan resultsFilterAfterStatistics:', this.getResultsStats(filteredDeepResults));
                
                // ÂêàAndFilterAfterÁöÑResult
                finalResults = this.mergeResults(finalResults, filteredDeepResults);
                //console.log('üíæ [SAVE LOG] ÂêàAndAfterÊúÄÁªàResultStatistics:', this.getResultsStats(finalResults));
            }
            
            // SaveÊúÄÁªàÁöÑFilterAfterResultÂà∞IndexedDB
            if (Object.keys(finalResults).length > 0) {
                const itemCount = Object.values(finalResults).reduce((sum, arr) => sum + (Array.isArray(arr) ? arr.length : 0), 0);
                //console.log(`üíæ [SAVE LOG] ÊúÄÁªàSaveÂà∞ IndexedDBÔºåÂÖ± ${itemCount} Êù°FilterAfterÁöÑRecord`);
                
                // ValidateSaveÁöÑData
                const domainCount = finalResults.domains ? finalResults.domains.length : 0;
                //console.log(`üíæ [SAVE LOG] ValidateÔºöSaveÁöÑDomainÊï∞Èáè = ${domainCount}`);
                
                // ‰ΩøÁî®IndexedDBSaveÊôÆÈÄöScan results
                if (!window.indexedDBManager) {
                    window.indexedDBManager = new IndexedDBManager();
                }
                // ÊûÑÈÄ†CompleteÁöÑURLUsed forSave
                const fullUrl = `https://${hostname}`;
                
                // GetPageÊ†áÈ¢òUsed forURL‰ΩçÁΩÆË∑üË∏™
                const pageTitle = document.title || tab.title || 'Unknown Page';
                
                // Save resultsÊó∂ÂåÖÂê´URL‰ΩçÁΩÆInformation
                await window.indexedDBManager.saveScanResults(fullUrl, finalResults, tab.url, pageTitle);
                //console.log(`‚úÖ [SAVE LOG] IndexedDB Save completed: ${hostname}ÔºåÂåÖÂê´URL‰ΩçÁΩÆInformation`);
            } else {
                //console.log('üíæ [SAVE LOG] NoValidResultNeedSave');
            }
            
            // ‰ΩøÁî®IndexedDBSaveÊ∑±Â∫¶ScanStatus
            const deepState = {
                running: this.deepScanRunning,
                scannedUrls: Array.from(this.scannedUrls || []),
                currentDepth: this.currentDepth,
                maxDepth: this.maxDepth,
                concurrency: this.concurrency
            };
            
            await window.indexedDBManager.saveDeepScanState(fullUrl, deepState);
            //console.log(`‚úÖ [SAVE LOG] Ê∑±Â∫¶ScanStatusSave to IndexedDBComplete: ${hostname}`);
            
            // Â¶ÇÊûúÊúâÊ∑±Â∫¶Scan resultsÔºå‰πüSave to IndexedDB
            if (this.deepScanResults && Object.keys(this.deepScanResults).length > 0) {
                await window.indexedDBManager.saveDeepScanResults(fullUrl, this.deepScanResults);
                //console.log(`‚úÖ [SAVE LOG] Ê∑±Â∫¶Scan resultsSave to IndexedDBComplete: ${hostname}`);
            }
            
        } catch (error) {
            console.error('‚ùå [SAVE LOG] DataSaveFailed:', error);
        }
    }
    
    // ÂêàAndFilterAfterÁöÑScan resultsÔºàEnsureÂêàAndÁöÑData‰πüÊòØFilterËøáÁöÑÔºâ
    async mergeFilteredResults(existingResults, newResults) {
        //console.log('üîç [MERGE LOG] StartÂêàAndFilterAfterÁöÑResult...');
        //console.log('üîç [MERGE LOG] Áé∞ÊúâResultStatistics:', this.getResultsStats(existingResults));
        //console.log('üîç [MERGE LOG] Êñ∞ResultStatistics:', this.getResultsStats(newResults));
        
        // Â¶ÇÊûúÊñ∞ResultËøòNoÁªèËøáFilterÔºåFirstFilter
        let filteredNewResults = newResults;
        if (newResults && !newResults._filtered) {
            //console.log('‚ö†Ô∏è [MERGE LOG] Êñ∞ResultNotFilterÔºåIn progressÂ∫îÁî®FilterÂô®...');
            filteredNewResults = await this.applyFiltersToScanResults(newResults);
            filteredNewResults._filtered = true; // MarkAlreadyFilter
            //console.log('‚úÖ [MERGE LOG] Êñ∞ResultFilterComplete:', this.getResultsStats(filteredNewResults));
        } else {
            //console.log('‚úÖ [MERGE LOG] Êñ∞ResultAlreadyFilterÔºåDirectÂêàAnd');
        }
        
        const mergedResults = {};
        const categories = [
            'absoluteApis', 'relativeApis', 'modulePaths', 'domains', 'urls', 
            'images', 'jsFiles', 'cssFiles', 'emails', 'phoneNumbers', 
            'ipAddresses', 'sensitiveKeywords', 'comments', 'paths', 
            'parameters', 'credentials', 'cookies', 'idKeys', 'companies', 
            'jwts', 'githubUrls', 'vueFiles', 'subdomains', 'audios', 'videos', 
            'idcards', 'ports'
        ];
        
        categories.forEach(category => {
            const existingItems = existingResults[category] || [];
            const newItems = filteredNewResults[category] || [];
            
            // ‰ΩøÁî®SetÂéªÈáçÔºåThenÂêàAnd
            const combinedSet = new Set([...existingItems, ...newItems]);
            mergedResults[category] = Array.from(combinedSet);
            
            if (existingItems.length > 0 || newItems.length > 0) {
                //console.log(`üîç [MERGE LOG] ${category}: ${existingItems.length} + ${newItems.length} = ${mergedResults[category].length}`);
            }
        });
        
        // MarkÂêàAndAfterÁöÑResultAlreadyFilter
        mergedResults._filtered = true;
        
        //console.log('‚úÖ [MERGE LOG] FilterAfterResultÂêàAndCompleteÔºåÊúÄÁªàStatistics:', this.getResultsStats(mergedResults));
        return mergedResults;
    }
    
    // ÂêàAndScan resultsÁöÑËæÖÂä©Method
    mergeResults(existingResults, newResults) {
        //console.log('üîç [MERGE-SIMPLE LOG] StartÁÆÄÂçïÂêàAndResult...');
        //console.log('üîç [MERGE-SIMPLE LOG] Áé∞ÊúâResultStatistics:', this.getResultsStats(existingResults));
        //console.log('üîç [MERGE-SIMPLE LOG] Êñ∞ResultStatistics:', this.getResultsStats(newResults));
        
        const mergedResults = {};
        const categories = [
            'customApis', 'absoluteApis', 'relativeApis', 'modulePaths', 'domains', 'urls', 
            'images', 'jsFiles', 'cssFiles', 'emails', 'phoneNumbers', 
            'ipAddresses', 'sensitiveKeywords', 'comments', 'paths', 
            'parameters', 'credentials', 'cookies', 'idKeys', 'companies', 
            'jwts', 'githubUrls', 'vueFiles'
        ];
        
        categories.forEach(category => {
            const existingItems = existingResults[category] || [];
            const newItems = newResults[category] || [];
            
            // ‰ΩøÁî®SetÂéªÈáçÔºåThenÂêàAnd
            const combinedSet = new Set([...existingItems, ...newItems]);
            mergedResults[category] = Array.from(combinedSet);
            
            if (existingItems.length > 0 || newItems.length > 0) {
                //console.log(`üîç [MERGE-SIMPLE LOG] ${category}: ${existingItems.length} + ${newItems.length} = ${mergedResults[category].length}`);
            }
        });
        
        //console.log('‚úÖ [MERGE-SIMPLE LOG] ÁÆÄÂçïÂêàAndCompleteÔºåÊúÄÁªàStatistics:', this.getResultsStats(mergedResults));
        console.warn('‚ö†Ô∏è [MERGE-SIMPLE LOG] Ê≥®ÊÑèÔºöÊ≠§MethodNotÂ∫îÁî®FilterÂô®ÔºåÂèØËÉΩÂåÖÂê´NotFilterData');
        
        return mergedResults;
    }
    
    async loadResults() {
        try {
            // GetCurrentPageURL‰Ωú‰∏∫Â≠òÂÇ®Key
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            if (!tab || !tab.url) {
                console.warn('‚ö†Ô∏è NoneÊ≥ïGetCurrentPageURLÔºåË∑≥ËøáLoad');
                return;
            }
            
            const urlObj = new URL(tab.url);
            const hostname = urlObj.hostname;
            
            console.log(`üîÑ [LOAD LOG] In progressLoadPageData: ${hostname}`);
            
            // Load from IndexedDBÊôÆÈÄöScan results
            if (!window.indexedDBManager) {
                window.indexedDBManager = new IndexedDBManager();
            }
            
            // ÊûÑÈÄ†CompleteÁöÑURLUsed forLoad
            const fullUrl = `https://${hostname}`;
            const loadedDataWrapper = await window.indexedDBManager.loadScanResults(fullUrl);
            // FixÔºöÊ≠£Á°ÆProcessÊñ∞ÁöÑDataÁªìÊûÑÔºåDataÂ≠òÂÇ®Âú® results Â±ûÊÄß‰∏≠
            let loadedData = null;
            if (loadedDataWrapper && loadedDataWrapper.results) {
                // CheckÊòØÂê¶ÊòØÊñ∞ÁöÑÂµåÂ•óÁªìÊûÑ
                if (loadedDataWrapper.results.results) {
                    // Êñ∞FormatÔºöDataÂú® results.results ‰∏≠
                    loadedData = loadedDataWrapper.results.results;
                } else {
                    // ÊóßFormatÔºöDataDirectÂú® results ‰∏≠
                    loadedData = loadedDataWrapper.results;
                }
            }
            
            if (loadedData && typeof loadedData === 'object') {
                const itemCount = Object.values(loadedData).reduce((sum, arr) => sum + (Array.isArray(arr) ? arr.length : 0), 0);
                const domainCount = loadedData.domains ? loadedData.domains.length : 0;
                
                //console.log(`üîÑ [LOAD LOG] Load from IndexedDBDataStatistics:`, this.getResultsStats(loadedData));
                //console.log(`üîÑ [LOAD LOG] Â≠òÂÇ®‰∏≠DomainÊï∞Èáè: ${domainCount}`);
                
                // CheckDataÊòØÂê¶AlreadyÁªèFilterËøá
                if (loadedData._filtered) {
                    //console.log(`‚úÖ [LOAD LOG] DataAlreadyFilterÔºåDirect‰ΩøÁî®`);
                    this.results = loadedData;
                    this.deepScanResults = loadedData;
                } else {
                    //console.log(`‚ö†Ô∏è [LOAD LOG] DataNotFilterÔºåReÂ∫îÁî®FilterÂô®...`);
                    // ÂØπLoadÁöÑDataReÂ∫îÁî®FilterÂô®
                    this.results = await this.applyFiltersToScanResults(loadedData);
                    this.deepScanResults = this.results;
                    
                    // ReSaveFilterAfterÁöÑData
                    await this.saveResults();
                    //console.log(`‚úÖ [LOAD LOG] AlreadyReFilterAndSaveData`);
                }
                
                //console.log(`‚úÖ [LOAD LOG] ÊúÄÁªàLoadDataStatistics:`, this.getResultsStats(this.results));
                this.displayResults();
            } else {
                //console.log(`‚ö†Ô∏è [LOAD LOG] Page ${hostname} Not foundValidÁöÑScanData`);
            }
            
            // fromIndexedDBÊÅ¢Â§çÊ∑±Â∫¶ScanStatus
            const deepState = await window.indexedDBManager.loadDeepScanState(fullUrl);
            
            if (deepState) {
                this.deepScanRunning = deepState.running || false;
                this.scannedUrls = new Set(deepState.scannedUrls || []);
                this.currentDepth = deepState.currentDepth || 0;
                this.maxDepth = deepState.maxDepth || 2;
                this.concurrency = deepState.concurrency || 3;
                
                console.log('üîÑ [LOAD LOG] fromIndexedDBÊÅ¢Â§çÊ∑±Â∫¶ScanStatus:', {
                    running: this.deepScanRunning,
                    scannedCount: this.scannedUrls.size,
                    depth: this.currentDepth
                });
            }
            
            // Â∞ùËØïLoad from IndexedDBÊ∑±Â∫¶Scan results
            const deepScanDataWrapper = await window.indexedDBManager.loadDeepScanResults(fullUrl);
            if (deepScanDataWrapper && deepScanDataWrapper.results) {
                const deepScanData = deepScanDataWrapper.results;
                const deepItemCount = Object.values(deepScanData).reduce((sum, arr) => sum + (Array.isArray(arr) ? arr.length : 0), 0);
                
                // Â¶ÇÊûúÊ∑±Â∫¶Scan resultsÊØîÊôÆÈÄöScan resultsÊõ¥CompleteÔºå‰ΩøÁî®Ê∑±Â∫¶Scan results
                if (deepItemCount > 0) {
                    const currentItemCount = loadedData ? Object.values(loadedData).reduce((sum, arr) => sum + (Array.isArray(arr) ? arr.length : 0), 0) : 0;
                    if (deepItemCount > currentItemCount) {
                        this.results = deepScanData;
                        this.deepScanResults = deepScanData;
                        console.log(`üîÑ [LOAD LOG] ‰ΩøÁî®IndexedDBÊ∑±Â∫¶Scan resultsÔºåÂÖ± ${deepItemCount} Êù°Record`);
                        this.displayResults();
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå [LOAD LOG] LoadResultFailed:', error);
        }
    }
    
    // GeneratePageÂ≠òÂÇ®Key - Unified‰ΩøÁî®Domain‰Ωú‰∏∫Key
    getPageStorageKey(url) {
        try {
            const urlObj = new URL(url);
            // Only‰ΩøÁî®Domain‰Ωú‰∏∫KeyÔºåDoes not include pathÔºåEnsureÂêå‰∏ÄDomain‰∏ãÁöÑÊâÄÊúâPageÂÖ±‰∫´Â≠òÂÇ®
            const key = urlObj.hostname;
            // ReplaceÁâπÊÆäÂ≠óÁ¨¶ÔºåEnsureKeyÁöÑValidÊÄß
            return key.replace(/[^a-zA-Z0-9._-]/g, '_');
        } catch (error) {
            console.error('GenerateÂ≠òÂÇ®KeyFailed:', error);
            // Â¶ÇÊûúURLParseFailedÔºå‰ΩøÁî®ÁÆÄÂåñÁöÑKey
            return url.replace(/[^a-zA-Z0-9._-]/g, '_').substring(0, 100);
        }
    }
    
    // DisplayResult - ‰ΩøÁî®DisplayManager
    async displayResults() {
        if (this.displayManager) {
            await this.displayManager.displayResults();
        } else {
            console.error('DisplayManagerNotInitialize');
        }
    }
    
    // BatchRequestTest - ‰ΩøÁî®ApiTester
    async batchRequestTest() {
        if (this.apiTester) {
            await this.apiTester.batchRequestTest();
        } else {
            console.error('ApiTesterNotInitialize');
            alert('API TestingÂô®NotInitializeÔºåNoneÊ≥ïExecuteTest');
        }
    }
    
        // AddCustomAPIPath
    addCustomApiPaths() {
        const customApiPathsInput = document.getElementById('customApiPaths');
        if (!customApiPathsInput) {
            console.error('Êâæ‰∏çÂà∞CustomAPIPathInputÊ°Ü');
            return;
        }
        
        const customApiPaths = customApiPathsInput.value.trim();
        if (!customApiPaths) {
            alert('ËØ∑InputCustomAPIPathÔºåEveryË°å‰∏Ä‰∏™Path');
            return;
        }
        
        // ParseCustomAPIPath
        const paths = this.apiTester.parseCustomApiPaths(customApiPaths);
        if (paths.length === 0) {
            alert('ËØ∑InputValidÁöÑAPIPath');
            return;
        }
        
        // Â∞ÜCustomAPIPathAddÂà∞Scan results‰∏≠
        if (!this.results.customApis) {
            this.results.customApis = [];
        }
        
        // ‰ΩøÁî®SetPerformÂéªÈáç
        const existingSet = new Set(this.results.customApis);
        let addedCount = 0;
        
        paths.forEach(path => {
            if (!existingSet.has(path)) {
                this.results.customApis.push(path);
                existingSet.add(path);
                addedCount++;
            }
        });
        
        // Save resultsÂà∞Â≠òÂÇ®
        this.saveResults();
        
        // ReDisplayResult
        this.displayResults();
        
        // DisplayAddSuccessÁöÑPrompt
        const message = `SuccessAdd ${addedCount} ‰∏™CustomAPIPathÂà∞Scan results‰∏≠:\n${paths.join('\n')}`;
        alert(message);
        
        // ClearInputÊ°Ü
        customApiPathsInput.value = '';
        
        //console.log(`‚úÖ Add‰∫Ü ${addedCount} ‰∏™CustomAPIPathÂà∞Scan results:`, paths);
    }
    
    // ÂàáÊç¢Ê∑±Â∫¶Scan - ‰ΩøÁî®DeepScanner
    toggleDeepScan() {
        if (this.deepScanner) {
            this.deepScanner.toggleDeepScan();
        } else {
            console.error('DeepScannerNotInitialize');
            alert('Ê∑±Â∫¶ScanÂô®NotInitializeÔºåNoneÊ≥ïExecuteScan');
        }
    }
}
